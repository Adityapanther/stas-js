const bsv = require('bsv')
const preimage = require('./preimage')
const {
  Varint
} = bsv.encoding
const {
  numberToLESM
} = require('./utils')

const sighash = bsv.crypto.Signature.SIGHASH_ALL | bsv.crypto.Signature.SIGHASH_FORKID
const P2PKH_UNLOCKING_SCRIPT_BYTES = 1 + 72 + 1 + 33

const DEFAULT_FEES = [
  {
    feeType: 'standard',
    miningFee: {
      satoshis: 500,
      bytes: 1000
    },
    relayFee: {
      satoshis: 250,
      bytes: 1000
    }
  },
  {
    feeType: 'data',
    miningFee: {
      satoshis: 500,
      bytes: 1000
    },
    relayFee: {
      satoshis: 250,
      bytes: 1000
    }
  }
]

function handleChange (tx, publicKey) {
  // In this implementation, we will always add a change output...

  // Create a change output. The satoshi amount will be updated after we calculate the fees.
  // ---------------------------------------------------------------------------------------
  const publicKeyHash = bsv.crypto.Hash.sha256ripemd160(publicKey.toBuffer()).toString('hex')

  const changeScript = bsv.Script.fromASM(`OP_DUP OP_HASH160 ${publicKeyHash} OP_EQUALVERIFY OP_CHECKSIG`)
  tx.addOutput(new bsv.Transaction.Output({
    script: changeScript,
    satoshis: 0
  }))

  // Now we need to calculate the preimage of the transaction.  This will become part of the unlocking script
  // and therefore increases the size and cost of the overall TX.
  const image = preimage(tx, sighash, 0, tx.inputs[0].output.script, tx.inputs[0].output.satoshisBN)

  const preimageLen = new Varint().fromNumber(image.buf.length).toBuffer().length

  // Calculate the fee required
  // ---------------------------------------------------------------------------------------
  // The actual unlocking script for STAS will be:
  // STAS amount + pubkeyhash (max 28 bytes)             2 or up to 28 bytes
  // OP_FALSE OP_FALSE (2 bytes)                         2 or up to 28 bytes
  // Amount of change + pubkeyhash (max 28 bytes)        2 or up to 28 bytes
  // OP_PUSH(<len(preimage)                             preimageLen
  // Preimage (len(preimage)                           len(preimage)
  // OP_PUSH_72                                           1 byte
  // <signature> DER-encoded signature (70-72 bytes) -   72 bytes
  // OP_PUSH_33                                           1 byte
  // <public key> - compressed SEC-encoded public key  - 33 bytes

  // Calculate the fees required...
  let txSizeInBytes = tx.toBuffer().length + 6 + (tx.outputs.length * 26) + preimageLen + image.buf.length + 1 + 72 + 1 + 33
  txSizeInBytes += ((tx.inputs.length - 1) * P2PKH_UNLOCKING_SCRIPT_BYTES)

  let satoshis = 0
  tx.inputs.forEach((input, i) => {
    if (i > 0) { // Skip the STAS input...
      satoshis += input.output.satoshis
    }
  })

  const sats = 500
  const perByte = 1000

  const fee = Math.ceil(txSizeInBytes * sats / perByte)

  tx.outputs[tx.outputs.length - 1].satoshis = satoshis - fee
}

// completeSTASUnlockingScript takes a bitcoin transaction where the 1st input is a STAS UTXO which has been signed
// as a standard P2PKH script, and prepends the necessary scripts to complete the STAS unlocking script...
// A STAS locking script is made up of 3 satoshi/public key hash "segments" where the 2nd and 3rd can be nil.
// Nil segments are filled with a pair of OP_FALSE opcodes.
function completeSTASUnlockingScript (tx, segments, sigStr, pubKeyStr) {
  if (tx.inputs.length < 1) {
    throw new Error('There must be at least 1 input')
  }

  if (!tx.inputs[0].script) {
    throw new Error('First input must be signed')
  }

  if (segments.length !== 3) {
    throw new Error('Must have exactly 3 segments')
  }

  // Build the STAS unlocking script.
  // ---------------------------------------------------------------------------------------
  let script = ' '

  segments.forEach(segment => {
    if (!segment) {
      script += 'OP_FALSE OP_FALSE '
    } else {
      script += numberToLESM(segment.satoshis)
      script += ' '
      script += bsv.crypto.Hash.sha256ripemd160(segment.publicKey.toBuffer()).toString('hex')
      script += ' '
    }
  })

  script = script.trim()

  script += ' ' + preimage(tx, sighash, 0, tx.inputs[0].output.script, tx.inputs[0].output.satoshisBN).buf.toString('hex')

  script += ' '
  script += sigStr + ' ' + pubKeyStr

  tx.inputs[0].setScript(bsv.Script.fromASM(script))
}

// getStasScript adds the destination public key hash and redemption public key hash (token id)
// to the appropriate version of STAS script
function getStasScript (destinationPublicKey, redemptionPublicKey, version) {
  const destinationPublicKeyHash = bsv.crypto.Hash.sha256ripemd160(destinationPublicKey.toBuffer()).toString('hex')
  const redemptionPublicKeyHash = bsv.crypto.Hash.sha256ripemd160(redemptionPublicKey.toBuffer()).toString('hex')

  let script

  switch (version) {
    case 1:
      script = `OP_DUP OP_HASH160 ${destinationPublicKeyHash} OP_EQUALVERIFY OP_CHECKSIG OP_VERIFY OP_DUP OP_HASH256 OP_16 OP_SPLIT OP_15 OP_SPLIT OP_SWAP OP_14 OP_SPLIT OP_SWAP OP_13 OP_SPLIT OP_SWAP OP_12 OP_SPLIT OP_SWAP OP_11 OP_SPLIT OP_SWAP OP_10 OP_SPLIT OP_SWAP OP_9 OP_SPLIT OP_SWAP OP_8 OP_SPLIT OP_SWAP OP_7 OP_SPLIT OP_SWAP OP_6 OP_SPLIT OP_SWAP OP_5 OP_SPLIT OP_SWAP OP_4 OP_SPLIT OP_SWAP OP_3 OP_SPLIT OP_SWAP OP_2 OP_SPLIT OP_SWAP OP_1 OP_SPLIT OP_SWAP OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_SWAP OP_15 OP_SPLIT OP_SWAP OP_14 OP_SPLIT OP_SWAP OP_13 OP_SPLIT OP_SWAP OP_12 OP_SPLIT OP_SWAP OP_11 OP_SPLIT OP_SWAP OP_10 OP_SPLIT OP_SWAP OP_9 OP_SPLIT OP_SWAP OP_8 OP_SPLIT OP_SWAP OP_7 OP_SPLIT OP_SWAP OP_6 OP_SPLIT OP_SWAP OP_5 OP_SPLIT OP_SWAP OP_4 OP_SPLIT OP_SWAP OP_3 OP_SPLIT OP_SWAP OP_2 OP_SPLIT OP_SWAP OP_1 OP_SPLIT OP_SWAP OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT 00 OP_CAT OP_BIN2NUM OP_1ADD 414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00 OP_TUCK OP_MOD OP_2DUP OP_SWAP OP_2 OP_DIV OP_GREATERTHAN OP_IF OP_SUB OP_ELSE OP_NIP OP_ENDIF OP_SIZE OP_DUP 24 OP_ADD 30 OP_SWAP OP_CAT 022079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179802 OP_CAT OP_SWAP OP_CAT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT 41 OP_CAT 038ff83d8cf12121491609c4939dc11c4aa35503508fe432dc5a5c1905608b9218 OP_CHECKSIGVERIFY 8200 OP_SPLIT OP_NIP a102 OP_SPLIT OP_SWAP OP_DUP 8d02 OP_SPLIT OP_NIP OP_ROT OP_8 OP_SPLIT OP_SWAP OP_BIN2NUM OP_SWAP OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_9 OP_ROLL OP_DUP OP_8 OP_NUM2BIN OP_10 OP_ROLL OP_DUP OP_6 OP_ROLL OP_EQUAL OP_NOTIF fdb802 76a914 OP_CAT OP_SWAP OP_CAT OP_5 OP_PICK OP_CAT OP_ELSE 1976a914 OP_SWAP OP_CAT 88ac OP_CAT OP_ENDIF OP_CAT OP_7 OP_PICK OP_IF OP_8 OP_PICK OP_8 OP_NUM2BIN OP_CAT fdb802 76a914 OP_CAT OP_8 OP_PICK OP_CAT OP_5 OP_PICK OP_CAT OP_CAT OP_3 OP_ROLL OP_ROT OP_8 OP_PICK OP_ADD OP_NUMEQUALVERIFY OP_ELSE OP_3 OP_ROLL OP_ROT OP_NUMEQUALVERIFY OP_ENDIF OP_3 OP_PICK OP_IF OP_4 OP_PICK OP_8 OP_NUM2BIN OP_CAT 1976a914 OP_4 OP_PICK OP_CAT 88ac OP_CAT OP_CAT OP_ENDIF OP_HASH256 OP_EQUAL OP_2ROT OP_2DROP OP_2SWAP OP_2DROP OP_NIP OP_RETURN ${redemptionPublicKeyHash}`
      break
    case 2:
      script = `OP_DUP OP_HASH160 ${destinationPublicKeyHash}  OP_EQUALVERIFY OP_CHECKSIG OP_VERIFY OP_DUP OP_HASH256 OP_16 OP_SPLIT OP_15 OP_SPLIT OP_SWAP OP_14 OP_SPLIT OP_SWAP OP_13 OP_SPLIT OP_SWAP OP_12 OP_SPLIT OP_SWAP OP_11 OP_SPLIT OP_SWAP OP_10 OP_SPLIT OP_SWAP OP_9 OP_SPLIT OP_SWAP OP_8 OP_SPLIT OP_SWAP OP_7 OP_SPLIT OP_SWAP OP_6 OP_SPLIT OP_SWAP OP_5 OP_SPLIT OP_SWAP OP_4 OP_SPLIT OP_SWAP OP_3 OP_SPLIT OP_SWAP OP_2 OP_SPLIT OP_SWAP OP_1 OP_SPLIT OP_SWAP OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_SWAP OP_15 OP_SPLIT OP_SWAP OP_14 OP_SPLIT OP_SWAP OP_13 OP_SPLIT OP_SWAP OP_12 OP_SPLIT OP_SWAP OP_11 OP_SPLIT OP_SWAP OP_10 OP_SPLIT OP_SWAP OP_9 OP_SPLIT OP_SWAP OP_8 OP_SPLIT OP_SWAP OP_7 OP_SPLIT OP_SWAP OP_6 OP_SPLIT OP_SWAP OP_5 OP_SPLIT OP_SWAP OP_4 OP_SPLIT OP_SWAP OP_3 OP_SPLIT OP_SWAP OP_2 OP_SPLIT OP_SWAP OP_1 OP_SPLIT OP_SWAP OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT 00 OP_CAT OP_BIN2NUM OP_1ADD 414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00 OP_TUCK OP_MOD OP_2DUP OP_SWAP OP_2 OP_DIV OP_GREATERTHAN OP_IF OP_SUB OP_ELSE OP_NIP OP_ENDIF OP_SIZE OP_DUP 24 OP_ADD 30 OP_SWAP OP_CAT 022079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179802 OP_CAT OP_SWAP OP_CAT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_SIZE OP_DUP OP_IF OP_1SUB OP_ENDIF OP_SPLIT OP_SWAP OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT OP_CAT 41 OP_CAT 038ff83d8cf12121491609c4939dc11c4aa35503508fe432dc5a5c1905608b9218 OP_CHECKSIGVERIFY OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT 20 OP_SPLIT OP_NIP 24 OP_SPLIT 1a OP_SPLIT OP_NIP c703 OP_SPLIT OP_4 OP_ROLL OP_DUP OP_NOTIF OP_DROP OP_2SWAP OP_2DROP OP_0 OP_ELSE OP_DUP OP_2 OP_6 OP_WITHIN OP_VERIFY OP_1SUB OP_TOALTSTACK OP_2ROT OP_3 OP_PICK OP_CAT OP_SWAP OP_CAT OP_FROMALTSTACK OP_1SUB OP_DUP OP_IF OP_TOALTSTACK OP_5 OP_ROLL OP_3 OP_PICK OP_SWAP OP_CAT OP_CAT OP_FROMALTSTACK OP_1SUB OP_DUP OP_IF OP_TOALTSTACK OP_5 OP_ROLL OP_3 OP_PICK OP_SWAP OP_CAT OP_CAT OP_FROMALTSTACK OP_1SUB OP_DUP OP_IF OP_TOALTSTACK OP_5 OP_ROLL OP_3 OP_PICK OP_SWAP OP_CAT OP_CAT OP_FROMALTSTACK OP_ENDIF OP_ENDIF OP_ENDIF OP_DROP OP_DUP OP_HASH256 OP_6 OP_ROLL OP_TUCK OP_4 OP_NUM2BIN OP_CAT OP_5 OP_ROLL OP_7 OP_ROLL OP_8 OP_ROLL OP_4 OP_NUM2BIN OP_CAT OP_3DUP OP_CAT OP_CAT OP_HASH256 OP_2SWAP OP_SWAP OP_CAT OP_ROT OP_CAT OP_HASH256 OP_6 OP_ROLL OP_TUCK OP_EQUAL OP_SWAP OP_ROT OP_EQUAL OP_BOOLOR OP_VERIFY OP_SWAP OP_4 OP_SPLIT OP_NIP OP_1 OP_SPLIT OP_OVER OP_3 OP_GREATERTHAN OP_NOT OP_VERIFY 24 OP_SPLIT OP_NIP OP_1 OP_SPLIT OP_OVER 00 OP_CAT OP_BIN2NUM FC00 OP_GREATERTHAN OP_IF OP_SWAP OP_DROP OP_2 OP_SPLIT OP_ENDIF OP_SWAP OP_4 OP_ADD OP_SPLIT OP_NIP OP_OVER OP_1SUB OP_IF 24 OP_SPLIT OP_NIP OP_1 OP_SPLIT OP_OVER 00 OP_CAT OP_BIN2NUM FC00 OP_GREATERTHAN OP_IF OP_SWAP OP_DROP OP_2 OP_SPLIT OP_ENDIF OP_SWAP OP_4 OP_ADD OP_SPLIT OP_NIP OP_OVER OP_2 OP_SUB OP_IF 24 OP_SPLIT OP_NIP OP_1 OP_SPLIT OP_OVER 00 OP_CAT OP_BIN2NUM FC00 OP_GREATERTHAN OP_IF OP_SWAP OP_DROP OP_2 OP_SPLIT OP_ENDIF OP_SWAP OP_4 OP_ADD OP_SPLIT OP_NIP OP_ENDIF OP_ENDIF OP_SWAP OP_DROP OP_1 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_TUCK OP_1ADD OP_LESSTHAN OP_SWAP OP_1 OP_GREATERTHAN OP_BOOLOR OP_NOT OP_VERIFY OP_SWAP OP_IF OP_8 OP_SPLIT OP_NIP OP_1 OP_SPLIT OP_OVER 00 OP_CAT OP_BIN2NUM FC00 OP_GREATERTHAN OP_IF OP_SWAP OP_DROP OP_2 OP_SPLIT OP_ENDIF OP_SWAP OP_SPLIT OP_NIP OP_ENDIF OP_8 OP_SPLIT OP_1 OP_SPLIT OP_OVER 00 OP_CAT OP_BIN2NUM FC00 OP_GREATERTHAN OP_IF OP_SWAP OP_DROP OP_2 OP_SPLIT OP_ENDIF OP_SWAP OP_SPLIT OP_DROP OP_3 OP_SPLIT OP_SWAP 76a914 OP_EQUALVERIFY 14 OP_SPLIT OP_NIP OP_3 OP_PICK OP_EQUALVERIFY OP_BIN2NUM OP_ENDIF OP_ROT OP_DUP b303 OP_SPLIT OP_NIP OP_3 OP_ROLL OP_8 OP_SPLIT OP_SWAP OP_BIN2NUM OP_4 OP_ROLL OP_ADD OP_SWAP OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_9 OP_ROLL OP_DUP OP_8 OP_NUM2BIN OP_10 OP_ROLL OP_DUP OP_6 OP_ROLL OP_EQUAL OP_NOTIF fdde03 76a914 OP_CAT OP_SWAP OP_CAT OP_5 OP_PICK OP_CAT OP_ELSE 1976a914 OP_SWAP OP_CAT 88ac OP_CAT OP_ENDIF OP_CAT OP_7 OP_PICK OP_IF OP_8 OP_PICK OP_8 OP_NUM2BIN OP_CAT fdde03 76a914 OP_CAT OP_8 OP_PICK OP_CAT OP_5 OP_PICK OP_CAT OP_CAT OP_3 OP_ROLL OP_ROT OP_8 OP_PICK OP_ADD OP_NUMEQUALVERIFY OP_ELSE OP_3 OP_ROLL OP_ROT OP_NUMEQUALVERIFY OP_ENDIF OP_3 OP_PICK OP_IF OP_4 OP_PICK OP_8 OP_NUM2BIN OP_CAT 1976a914 OP_4 OP_PICK OP_CAT 88ac OP_CAT OP_CAT OP_ENDIF OP_HASH256 OP_EQUAL OP_2ROT OP_2DROP OP_2SWAP OP_2DROP OP_NIP OP_RETURN ${redemptionPublicKeyHash}`
      break
    default:
      throw new Error('invalid protocol version')
  }

  return bsv.Script.fromASM(script)
}

module.exports = {
  P2PKH_UNLOCKING_SCRIPT_BYTES,
  DEFAULT_FEES,
  sighash,
  getStasScript,
  handleChange,
  completeSTASUnlockingScript
}
